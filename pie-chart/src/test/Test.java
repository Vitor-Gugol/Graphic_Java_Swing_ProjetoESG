/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package test;
import connection.DatabaseConnection;
import java.awt.Color;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javaswingdev.chart.ModelPieChart;

/**
 *
 * @author hugoc
 */
public class Test extends javax.swing.JFrame {

    /**
     * Creates new form Test
     */
    public Test() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pieChart = new javaswingdev.chart.PieChart();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        comboYear = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        comboMonth = new javax.swing.JComboBox<>();
        pieChart1 = new javaswingdev.chart.PieChart();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(153, 153, 0));
        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("em kgCO2e");
        pieChart.add(jLabel3);
        jLabel3.setBounds(560, 360, 100, 16);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Emissão de Carbono");
        pieChart.add(jLabel4);
        jLabel4.setBounds(110, 10, 161, 21);

        jLabel1.setText("Year");

        comboYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboYearActionPerformed(evt);
            }
        });

        jLabel2.setText("Month");

        comboMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboMonthActionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(153, 153, 0));
        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("em kgCO2e");
        pieChart1.add(jLabel5);
        jLabel5.setBounds(560, 360, 100, 16);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("Uso de energias");
        pieChart1.add(jLabel6);
        jLabel6.setBounds(130, 10, 161, 21);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(pieChart, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addComponent(pieChart1, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(33, 33, 33)
                .addComponent(comboYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(jLabel2)
                .addGap(33, 33, 33)
                .addComponent(comboMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(268, 268, 268))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(comboMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pieChart1, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                    .addComponent(pieChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(74, 74, 74))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       try{
          DatabaseConnection.getInstance().connectToDatabase();
          showYear(); 
       }catch(Exception e){
           e.printStackTrace();
       }
        
    }//GEN-LAST:event_formWindowOpened

    private void comboYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboYearActionPerformed
      if(comboYear.getSelectedIndex()>=0){
          int year=Integer.valueOf(comboYear.getSelectedItem().toString());
          try {
              comboMonth.removeAllItems();
              showMonth(year);
          } catch (Exception e) {
              e.printStackTrace();
          }
      }
    }//GEN-LAST:event_comboYearActionPerformed

    private void comboMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboMonthActionPerformed
        if(comboMonth.getSelectedIndex()>=0){
            int year = Integer.valueOf(comboYear.getSelectedItem().toString());
            Model_Month month =(Model_Month)comboMonth.getSelectedItem();
            showData(year, month.getMonth());
        }
        
    }//GEN-LAST:event_comboMonthActionPerformed

    private void showYear() throws SQLException {
    String consulta = "SELECT DATE_FORMAT(data, '%Y') AS YearNumber FROM consumoenergia GROUP BY YearNumber";

    try (PreparedStatement p = DatabaseConnection.getInstance().getConnection().prepareStatement(consulta);
         ResultSet r = p.executeQuery()) {
        
        while (r.next()) {
            int year = r.getInt("YearNumber");
            comboYear.addItem(String.valueOf(year));
        }
    }
}


   private void showMonth(int year) throws SQLException {
    String consulta = "SELECT DATE_FORMAT(data, '%M') AS MonthText, DATE_FORMAT(data, '%m') AS MonthNumber " +
                      "FROM consumoenergia " +
                      "WHERE DATE_FORMAT(data, '%Y') = ? " +
                      "GROUP BY MonthNumber, MonthText";

    try (PreparedStatement p = DatabaseConnection.getInstance().getConnection().prepareStatement(consulta)) {
        p.setInt(1, year);
        
        try (ResultSet r = p.executeQuery()) {
            while (r.next()) {
                String monthText = r.getString("MonthText");
                int month = r.getInt("MonthNumber");
                
                comboMonth.addItem(new Model_Month(month, monthText));
            }
        }
    }
}

    
private void showData(int year, int month) {
    pieChart.clearData();
   
    
    String consulta = "SELECT ce.tipo_energia, SUM(ce.quantidade * fe.fator_emissao) AS emissao_total " +
                      "FROM consumoenergia ce " +
                      "JOIN fatoresemissao fe ON ce.tipo_energia = fe.tipo_energia " +
                      "WHERE YEAR(ce.data) = ? AND MONTH(ce.data) = ? " +
                      "GROUP BY ce.tipo_energia;";

    try (PreparedStatement p = DatabaseConnection.getInstance().getConnection().prepareStatement(consulta)) {
        p.setInt(1, year);
        p.setInt(2, month);

        try (ResultSet r = p.executeQuery()) {
            int indice = 0;
            boolean hasData = false; // Verifica se há dados retornados
            while (r.next()) {
                hasData = true;
                String tipoEnergia = r.getString("tipo_energia");
                double valores = r.getDouble("emissao_total");

                // Depuração
                System.out.println("Tipo de Energia: " + tipoEnergia + ", Emissão Total: " + valores);

                // Adiciona a cor com o índice modulado pelo tamanho do array de cores
                pieChart.addData(new ModelPieChart(tipoEnergia, valores, getColor(indice++)));
            }

            if (!hasData) {
                System.out.println("Nenhum dado encontrado para o ano " + year + " e mês " + month);
            }
        }
    } catch (SQLException e) {
        // Use um framework de logging aqui para registrar a exceção
        e.printStackTrace();
    }
    
    
    
    //pieChart1
    pieChart1.clearData();
        String consulta1 = "SELECT ce.tipo_energia, SUM(ce.quantidade) AS quantidade_total FROM consumoenergia ce JOIN fatoresemissao fe ON ce.tipo_energia = fe.tipo_energia WHERE YEAR(ce.data) = ? AND MONTH(ce.data) = ? GROUP BY ce.tipo_energia;"
;

    try (PreparedStatement p = DatabaseConnection.getInstance().getConnection().prepareStatement(consulta1)) {
        p.setInt(1, year);
        p.setInt(2, month);

        try (ResultSet r = p.executeQuery()) {
            int indice = 0;
            boolean hasData = false; // Verifica se há dados retornados
            while (r.next()) {
                hasData = true;
                String tipoEnergia = r.getString("tipo_energia");
                double valores = r.getDouble("quantidade_total");

                // Depuração
                System.out.println("Tipo de Energia: " + tipoEnergia + ", Quantidade total: " + valores);

                // Adiciona a cor com o índice modulado pelo tamanho do array de cores
                pieChart1.addData(new ModelPieChart(tipoEnergia, valores, getColor(indice++)));
            }

            if (!hasData) {
                System.out.println("Nenhum dado encontrado para o ano " + year + " e mês " + month);
            }
        }
    } catch (SQLException e) {
        // Use um framework de logging aqui para registrar a exceção
        e.printStackTrace();
    }
}







    
    
    
 private Color getColor(int index) {
    Color[] colors = new Color[]{
        new Color(255, 102, 102),  // Vermelho
        new Color(58, 55, 227),    // Azul
        new Color(206, 215, 33),   // Amarelo
        new Color(29, 184, 85),    // Verde
        new Color(110, 124, 181),    // Vermelho claro
        new Color(94, 217, 214),    // Azul claro
        new Color(255, 102, 0) 
            
    };
    return colors[index % colors.length];
}


    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Test().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Object> comboMonth;
    private javax.swing.JComboBox<String> comboYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javaswingdev.chart.PieChart pieChart;
    private javaswingdev.chart.PieChart pieChart1;
    // End of variables declaration//GEN-END:variables
}
